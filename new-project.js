#!/usr/bin/env node
/**
 * Copyright (c) 2017, Isiah Meadows.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
"use strict"
const cp = require("child_process")
const fs = require("fs")
const path = require("path")
const os = require("os")
const progname = path.basename(process.argv[1])

if (process.argv.length <= 2) {
    console.log(`
Usage: ${progname} [ opts... ] directory
Try '${progname} --help' for more information.
`)
    process.exit(1)
}

function printHelp(full) {
    console.log(`
${progname} - A simple, opinionated Node.js project generator

Usage:

    ${progname} [ opts... ] directory

Description:

    Generate a new Node.js project, managed with Git, linted with ESLint using
    my 'isiahmeadows/node-4' preset, and tested with Thallium. It's a highly
    opinionated, minimalistic project generator that I use myself to get things
    started quickly.

Options:`)

    if (full) {
        console.log(`
    -h, --help
        Show the simple help prompt. It is also shown when no arguments are
        passed.

    -hh, --help-full
        Show this help prompt. Best viewed when piped into a pager like GNU
        'less'.`)
    } else {
        console.log(`
    -h, --help
        Show this help prompt. This is also shown when no arguments are passed.

    -hh, --help-full
        Show the full help prompt. Best viewed when piped into a pager like
        GNU 'less'.`)
    }

    console.log(`
    -d description, --desc description
        Set the description for the package. Defaults to a generic thing.

    -v version, --version version
        Set the initial version of the package. Defaults to '0.0.0'.

    -l license, --license license
        Set the license of the package. Defaults to 'ISC'.

    -n name, --name name
        Set the name of the package. Defaults to the directory's basename.

    directory
        Where the package will be located. This is the only required argument,
        and the package name is inferred from the basename of the directory.

    The 'author' field of the 'package.json' is read from your global 'git'
    config, so you don't need to specify it.`)

    if (!full) {
        console.log(`
    This returns a non-zero exit code if any errors were encountered.`)
    } else {
        console.log(`
    This returns a non-zero exit code if any errors were encountered, such as
    if the specified directory already exists.

Overview:

    Think of it as like a Yeoman generator or boilerplate project, but a
    standalone program and without all the crud and useless boilerplate-filled
    additions that usually comes with them. Here's what you get with this:

    -   ESLint for linting, using my 'isiahmeadows/node-4' preset.
    -   Thallium for testing, a simple test framework with batteries included.
    -   A nice, simple, functional workflow free of complication.

How to use:

    1.  If you haven't already, run 'npm install -g thallium'. This installs
        Thallium globally for you, and gives you access to the global 'tl'
        command.

    2.  Make sure ESLint is integrated into your editor, so it can check your
        work for you. For example, in Atom, make sure both 'linter' and
        'linter-eslint' are installed.

    3.  Write your source code in 'lib/'. It's all using plain CommonJS and
        Node with its great ES6 support.

    4.  Write your tests in 'test/'. Thallium's API is fairly easy to learn,
        and the grunt work in setting it up is already done.

    5.  When you're ready to test, just run 'tl'.

Folder Structure:

    The repo generated by this is an uninitialized Git repository, with the
    latest versions of ESLint, Thallium, and my 'isiahmeadows/node-4' preset
    already installed via 'npm install' and fully configured. It has the
    following structure:

    project/
    ╷
    ├── .git/
    │   Your git directory
    │
    ├── node_modules/
    │   The newly installed modules with their dependencies:
    │   - 'thallium'
    │   - 'eslint'
    │   - 'eslint-config-isiahmeadows'
    │
    ├── .gitignore
    │   A basic config file telling Git to ignore these files in the root:
    │   - 'node_modules'
    │   - 'npm-debug.log'
    │   - '.eslintcache'
    │
    ├── .eslintignore
    │   An exact clone of the '.gitignore' file
    │
    ├── .eslintrc.yml
    │   An ESLint config featuring my ESLint preset.
    │
    ├── .tl.js
    │   A simple Thallium config. This file is technically optional, and just
    │   carries the defaults, but it's here so you can customize it later.
    │   (Say, you prefer a different reporter than the default 'spec' reporter,
    │   or you now have mocks, and you want to ignore that directory.)
    │
    ├── README.md
    │   The repository's README file, started for you with the module name and
    │   description. You can then just open the file.
    │
    ├── lib/
    │   The library code for the repository lives here.
    │   ╷
    │   └── index.js
    │       The entry point for the library.
    │
    └── test/
        The test code for the repository lives here. Thallium will run
        everything here, by you just running 'tl'.
        ╷
        └── index.js
            A dummy test file for 'lib/index.js'.

Rationale:

    It's simple and straightforward enough that I've been doing most of this
    setup work myself without a generator, but I decided one binary should be
    able to do it all for me, hence why I wrote this.`)
    }

    console.log(`
Author:

    Isiah Meadows
    / Email: me@isiahmeadows.com | Website: http://isiahmeadows.com \\
    \\ GitHub: @isiahmeadows      | Twitter: @isiahmeadows1          /

Bugs:

    You can email me, tweet at me, file an issue in this utility's GitHub repo
    (https://github.com/isiahmeadows/new-project), or however you feel it's
    best to get to me. Whatever works for you works for me.

License:

    ISC License
`)

    process.exit()
}

function parseOpts() {
    const opts = {
        directory: undefined,
        name: undefined,
        description: "A really fancy module I just created!",
        version: "0.0.0",
        license: "ISC",
    }

    let next

    for (const arg of process.argv.slice(2)) {
        if (next != null) {
            opts[next] = arg
            next = undefined
            continue
        }

        switch (arg) {
        case "--help": case "-h": return printHelp(false)
        case "--help-full": case "-hh": return printHelp(true)
        case "--desc": case "-d": next = "description"; break
        case "--version": case "-v": next = "version"; break
        case "--license": case "-l": next = "license"; break
        case "--name": case "-n": next = "name"; break
        default:
            if (arg[0] !== "-" && !opts.directory) {
                opts.directory = arg
                if (!opts.name) opts.name = path.basename(opts.directory)
            }
        }
    }

    if (!opts.directory) opts.directory = process.cwd()
    return opts
}

function exec(file) {
    return new Promise((resolve, reject) => {
        file = file.trim().split(/\s+/g)
        cp.spawn(file[0], file.slice(1), {stdio: "inherit"})
        .on("error", reject)
        .on("exit", code => {
            if (!code) return resolve()
            return reject(new Error(
                `'${file.join(" ")}' exited with code ${code}`
            ))
        })
    })
}

function pcall(f) {
    return new Promise((resolve, reject) => {
        f.apply(undefined, [].slice.call(arguments, 1).concat([
            (err, data) => err != null ? reject(err) : resolve(data),
        ]))
    })
}

function write(file, contents) {
    contents = `${contents.trim()}\n`.replace(/\r?\n|\r/g, os.EOL)
    return pcall(fs.writeFile, path.resolve(file), contents, "utf-8")
}

function mkdir(file) {
    file = path.resolve(file)
    return pcall(fs.mkdir, path.resolve(file))
}

const opts = parseOpts()

pcall(fs.readdir, opts.directory)
.then(data => {
    if (data.length === 0) return
    console.error(`
'${opts.directory}' is not empty! Please ensure the directory is clean before
running this script.
`.trim())
    process.exit(1)
})
.catch(e => {
    if (e.code !== "ENOENT") throw e
    // We only get here if `opts.directory !== process.cwd()`.
    return mkdir(opts.directory)
})
.then(() => console.log("Initializing repository..."))
.then(() => process.chdir(opts.directory))
.then(() => Promise.all([
    exec("git init --quiet"),

    pcall(cp.execFile, "git", ["config", "--global", "user.name"])
    .then(name => write("package.json", JSON.stringify({
        name: opts.name,
        version: opts.version,
        description: opts.description,
        main: "lib/index.js",
        scripts: {
            lint: "eslint .",
            test: "eslint . && tl",
        },
        author: name,
        license: opts.license,
    }, null, 2))),

    write(".gitignore", `
/node_modules
/npm-debug.log
/.eslintcache
`),

    write(".eslintignore", `
/node_modules
/npm-debug.log
/.eslintcache
`),

    write(".eslintrc.yml", `
root: true
extends: isiahmeadows/node-4
`),

    write(".tl.js", `
const t = require("thallium")

t.reporter(require("thallium/r/spec"))
exports.files = ["test/**/*.js"]
`),

    write("README.md", `
# ${opts.name}

${opts.description}

**TODO: fill this in with something interesting.**
`),

    mkdir("lib").then(() => write("lib/index.js", `
"use strict"

// FIXME: do something real.
exports.fixme = (arg1, arg2) => arg1 * arg2
`)),

    mkdir("test").then(() => write("test/index.js", `
"use strict"

const t = require("thallium")
const assert = require("thallium/assert")
const index = require("../lib/index")

t.test("index", () => {
    t.test("fixme()", () => {
        // FIXME: do something real.
        assert.equal(index.fixme(1, 2), 3)
    })
})
`)),
]))
.then(() => console.log("Installing packages..."))
.then(() => exec(`
    npm install
        --depth 0
        --global false
        --save-dev
        thallium
        eslint
        eslint-config-isiahmeadows
`))
.then(() => console.log("Project initialized."))
.catch(e => {
    console.error(e.stack)
    process.exit(1)
})
